c
study.tags.first.studies.count
study.tags
study.tags.first.studies.count
study.tags
c
Study.find(object.study_id)
object
object.study.first
object.study
c
object.study
;
object.study
object.study.user_id
object.study
c
study.images.update!(updated_images)
updated_images = {:class_name=>"uhh"}
study.images.update!(updated_images)
updated_images = {}
study.images
c
study.update!(images: [])
study.update!(images: false)
study.images.first
study.images.first.attachment
study.images.first
study.images.update!({})
study.images.update!({images: false})
study.images.update!(false)
study.images
study.valid?
study.images = false
study.images.update!({})
study.images.update!()
study.valid?
study.images
c
invalid.record
invalid.record.errors.full_messages
invalid.records.errors
invalid.records
invalid
return raise ActiveRecord::RecordInvalid.new, { errors: {message: 'Duration is too short (minimum is 1 number)'} }invalid
c
raise ActiveRecord::RecordInvalid.new { errors: {message: "oopsiessss"} }
}
raise ActiveRecord::RecordInvalid { errors: {message: "oopsiessss"} }
return raise ActiveRecord::RecordInvalid.new, { errors: {message: 'Duration is too short (minimum is 1 number)'} }
testObj.record
raise invalid_study_response(testObj)
testObj = {record: {errors: {full_messages: "deleted too many images baaby!"}}}
raise invalid_study_response(invalid.record.errors.full_messages = "deleted too many images baby!")
raise invalid_study_response("deleted too many images baby!")
raise invalid_study_response
raise "ayyyy"
study.images.destroy
study.images.destroy!
study.images.first.blob
study.images.blobs
study.images
c
params[:images_to_purge]&.count
params[:images_to_purge]
study.images.count
c
study.images.count
study.images
c
study.images.count > 1
study.images.count >= 1
study.images.count === 1
study.images.count <= 1
study.images.count
c
study.images.count
c
params[:images_to_purge]
c
params[:images_to_purge]
tag_id
c
params
c
params[:images].first
params[:images]
study_params
c
Tag.find_by!(tag_name: params[:tag_name]).studies
c
studies
c
params
params[:circular_avatar_status]
c
params[:circular_avatar_status]
@user
user
c
@user
params
c
params[:avatar]
c
params[:avatar]
c
params[:lang].to_f
params[:lang]
params[:lat]
params[:latLng]
c
Comment.find_by(id: object.comment_id)
object.comment
c
Study.find(params[:study_id]).user.notifications.create(author_id: 2)
Study.find(params[:study_id]).user.notifications
Study.find(params[:study_id])
c
Study.find(params[:study_id]).user.notifications.create(study_id: params[:study_id], author: params[:author_id])
Study.find(params[:study_id]).user.notifications.create(study_id: params[:study_id], author: params[:author_id]))
Study.find(params[:study_id]).user.notifications.create(study_id: params[:study_id])
Study.find(params[:study_id]).user.notifications
Study.find(params[:study_id]).user
params[:study_id]
c
params[:user_id]
params
c
object_id
object.id
c
status.count
status.length
status == false
status == true
stat ==true
newstat == false
newstat == true
newstat = object.notifications.where(read_status: true)
status == true ? true : false
status = true ?
status.true?
status =  object.notifications.where(read_status: false)
object.notifications.where(read_status: false)
object.notifications.where(read_status: true)
c
Study.find(params[:study_id]).user
Study.find(params[:study_id])
study.find(params[:study_id])
study.find(params[:study_id]
params
c
params
c
@user
c
params
c
Tag.find_by(id: user_params[:tag_id]).studies.where(user_id: user_params[:id]).count
Tag.find_by(id: user_params[:tag_id]).studies.where(user_id: user_params[:id])
Tag.find_by(id: user_params[:tag_id]).studies.count
user.studies.count
user.studies
c
params[:tag_id]
tag_id
object.studies
object
c
studies
@studies
c
object.beagle
beagle
q
c
cc
c
object.methods
object
object.brabel
brabel
c
@studies
c
object.blorbel
c
user.studies.count
user.filtered_user_studies(user_params[:tag_id]).count
user.filtered_user_studies(user_params[:tag_id])
user.filtered_user_studies(1)
user = User.find_by(id: user_params[:id])
c
user.filtered_user_studies(1)
user.filtered_user_studies
user = User.find_by(id: user_params[:id])
User.find_by(id: user_params[:id]).filtered_user_studies(user_params
user_params[:tag_id].to_i
user_params[:tag_id]
params
User.find_by(id: user_params[:id]).filtered_user_studies params[:tag_id]
User.find_by(id: user_params[:id]).filtered_user_studies
User.find_by(id: user_params[:id]).filtered_user_studies(user_params[:tag_id])
User.find_by(id: user_params[:id])
c
:tag_id
tag_id
params
c
options[:filtered_studies]
object.options[:filtered_studies]
c
object.options[:filtered_studies]
options[:filtered_studies]
options
c
object.studies
object.username
c
object.testing
object.id
self.id
c
Tag.all
c
user.studies
user
c
user.studies
user
user[:studies]
c
params[:tag_id]
c
object.studies
params[:tag_id]
tag_id
tag
object.studies
object
c
object.user
object.user.username
c
object
params
user
this
self
self.studies
object.studies
studies
:studiees
c
params
